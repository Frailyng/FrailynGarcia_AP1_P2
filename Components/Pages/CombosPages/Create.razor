@page "/Combo/Create"
@inject CombosService CombosService
@inject ArticulosService ArticulosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<EditForm Model="Combo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h5 class="card-title">Crear Combo</h5>
            </div>

            <div class="card-body">
                <!-- Notification Success (Local, arriba) -->
                @if (GuardarExitoso)
                {
                    <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
                        <strong>¡Combo guardado correctamente!</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                <!-- ComboId -->
                <div class="mb-3">
                    <label for="ComboId" class="form-label">Combo ID:</label>
                    <InputNumber @bind-Value="Combo.ComboId" class="form-control" readonly style="background-color: #e9ecef; color: #6c757d;">
                    </InputNumber>
                </div>

                <!-- Fecha -->
                <div class="mb-3">
                    <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
                    <InputDate @bind-Value="Combo.Fecha" class="form-control"></InputDate>
                </div>

                <!-- Descripcion -->
                <div class="mb-3">
                    <label for="Descripcion" class="form-label">Descripcion:</label>
                    <InputText @bind-Value="Combo.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Combo.Descripcion)" />
                </div>

                <!-- Checkbox Vendido -->
                <div class="mb-3">
                    <label for="Vendido" class="form-label"><strong>Vendido</strong></label>
                    <InputCheckbox @bind-Value="Combo.Vendido" class="form-check-input" />
                    <ValidationMessage For="@(() => Combo.Vendido)" />
                </div>

                <!-- Detalles de los combos -->
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles de Articulos Utilizados</h5>

                    <ArticulosPicker Articulos="ListaArticulos"
                                     ArticuloId="DetalleSeleccionado.ArticuloId"
                                     Cantidad="DetalleSeleccionado.Cantidad"
                                     Precio="DetalleSeleccionado.Precio"
                                     OnArticuloSelected="HandleArticuloSelected" />
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <th>Articulo</th>
                                <th>Descripción</th>
                                <th>Cantidad</th>
                                <th>Precio Total</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var combo in Combo.CombosDetalle)
                            {
                                <tr class="text-center">
                                    <td>@combo.ArticuloId</td>
                                    <td>@GetArticuloDescripcion(combo.ArticuloId)</td>
                                    <td>@combo.Cantidad</td>
                                    <td>@($"${combo.Precio:N2}")</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverDetalle(combo)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>

                <!-- Monto Total -->
                <div class="row">
                    <div class="col-6 offset-6">
                        <div class="mb-3">
                            <label class="form-label"><strong>Monto Total a Pagar</strong></label>
                            <label class="form-control text-end"><strong>@($"${MontoTotal:N2}")</strong></label>
                            <ValidationMessage For="(() => Combo.Precio)" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="card-footer text-center mt-2">
                <a href="/Combo/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Combos Combo = new Combos();
    public CombosDetalle DetalleSeleccionado { get; set; } = new();
    public List<ArticulosPCs> ListaArticulos { get; set; } = new();
    private bool GuardarExitoso { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Combo.Fecha = DateTime.Today;
        Combo.CombosDetalle = new List<CombosDetalle>();
        ListaArticulos = await ArticulosService.Listar(a => true);
    }

    private async Task HandleArticuloSelected((ArticulosPCs articulos, int cantidad, double precio) selection)
    {
        if (Combo.CombosDetalle.Any(d => d.ArticuloId == selection.articulos.ArticuloId))
        {
            return;
        }

        double precioTotal = selection.cantidad * selection.articulos.Precio;

        var detalle = new CombosDetalle
            {
                ArticuloId = selection.articulos.ArticuloId,
                Cantidad = selection.cantidad,
                Precio = precioTotal
            };

        Combo.CombosDetalle.Add(detalle);

        DetalleSeleccionado = new CombosDetalle();
        await Task.CompletedTask;
    }

    private string GetArticuloDescripcion(int articuloId)
    {
        var articulo = ListaArticulos.FirstOrDefault(a => a.ArticuloId == articuloId);
        return articulo?.Descripcion ?? "Descripción no disponible";
    }

    public double MontoTotal => Combo.CombosDetalle.Sum(d => d.Precio);

    public async Task Guardar()
    {
        Combo.Precio = MontoTotal;
        var guardo = await CombosService.Guardar(Combo);

        if (guardo)
        {
            // Actualizar existencias de los artículos
            foreach (var detalle in Combo.CombosDetalle)
            {
                var articulo = await ArticulosService.BuscarPorId(detalle.ArticuloId);

                if (articulo != null)
                {
                    articulo.Existencia -= detalle.Cantidad;
                    if (articulo.Existencia < 0)
                    {
                        articulo.Existencia = 0;
                    }

                    await ArticulosService.Actualizar(articulo);
                }
            }

            GuardarExitoso = true; // Mostrar la notificación de éxito

            // Forzar la actualización de la página para que se renderice la notificación
            StateHasChanged();

            // Esperar unos segundos antes de redirigir
            await Task.Delay(3000);

            navigationManager.NavigateTo("/Combo/Index"); // Redirigir a la página de index
        }
        else
        {
            // Si el guardado falla, puedes manejar este caso si lo deseas
            GuardarExitoso = false;
            StateHasChanged();
        }
    }

    public void RemoverDetalle(CombosDetalle detalle)
    {
        Combo.CombosDetalle.Remove(detalle);
        DetalleSeleccionado = detalle;
    }
}



